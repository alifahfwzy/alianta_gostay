import '../config/supabase_config.dart';

class UserService {
  static final _client = SupabaseConfig.client;

  // Register user
  static Future<Map<String, dynamic>> registerUser({
    required String email,
    required String password,
    required String username,
  }) async {
    try {
      // Check if the users table exists first
      try {
        // Check if email already exists
        final existingUser =
            await _client.from('users').select().eq('email', email).maybeSingle();

        if (existingUser != null) {
          return {'success': false, 'message': 'Email sudah terdaftar'};
        }
        
        // Insert new user
        await _client.from('users').insert({
          'email': email,
          'password': password, // In production, hash this!
          'username': username,
        });

        return {'success': true, 'message': 'Registrasi berhasil'};
      } catch (e) {
        print('Error checking/inserting user: $e');
        
        // Check if the error is because the table doesn't exist
        if (e.toString().contains('relation "users" does not exist')) {
          // Try to create the table
          try {
            await SupabaseConfig.createUsersTable();
            
            // Try again after table creation
            await _client.from('users').insert({
              'email': email,
              'password': password,
              'username': username,
            });
            
            return {'success': true, 'message': 'Registrasi berhasil'};
          } catch (tableError) {
            print('Error creating users table: $tableError');
            return {
              'success': false, 
              'message': 'Tabel users belum ada. Silahkan hubungi administrator.'
            };
          }
        }
        
        return {'success': false, 'message': 'Terjadi kesalahan: $e'};
      }
    } catch (e) {
      return {'success': false, 'message': 'Terjadi kesalahan: $e'};
    }
  }

  // Login user
  static Future<Map<String, dynamic>> loginUser({
    required String email,
    required String password,
  }) async {
    try {
      final response =
          await _client
              .from('users')
              .select()
              .eq('email', email)
              .eq('password', password) // In production, hash and compare!
              .maybeSingle();

      if (response != null) {
        return {'success': true, 'message': 'Login berhasil', 'user': response};
      } else {
        return {'success': false, 'message': 'Email atau password salah'};
      }
    } catch (e) {
      return {'success': false, 'message': 'Terjadi kesalahan: $e'};
    }
  }
}
